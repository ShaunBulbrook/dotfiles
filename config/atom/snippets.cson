# =============================
# Sass
# =============================
'.sass':
	'Media query':
		prefix: 'mquery'
		body: """
		@include mQuery($1) {
			${2:// code}
		}
		"""

# =============================
# JavaScript
# =============================
".js":
	"AMD module":
		prefix: "amd"
		body: """
		define([
			'core/compose',
			'widget/_Base'
		], function (compose, _Base) {
			return compose(_Base, {
				startup: function() {
					${1:console.log(this)};
				}
			});
		});
		"""
	"Quick log":
		prefix: "here"
		body: "console.log('here');"
	"Throw error":
		prefix: "throw"
		body: "if (${1:err}) throw ${1:err};"
	"Use strict":
		prefix: "strict"
		body: "'use strict';"
	"React skeleton":
		prefix: "react"
		body: """
		import React from 'react';
		import PropTypes from 'prop-types';

		import './${1:Module}.css';

		class ${1:Module} extends React.Component {
			constructor(props) {
				super(props);
			}

			render() {
				return (
					<div className="${1:Module}">
						<p>${1:Module}</p>
					</div>
				);
			}
		}

		${1:Module}.propTypes = {
			something: PropTypes.string.isRequired,
		};

		export default ${1:Module};
		"""
	"FSC React":
		prefix: "fsc"
		body: """
		import React from 'react';
		import PropTypes from 'prop-types';

		import './${1:Module}.css';

		const ${1:Module} = ({ something }) => (
			<div className="${1:Module}">
				<p>${1:Module}</p>
			</div>
		);

		${1:Module}.propTypes = {
			something: PropTypes.string.isRequired,
		};

		export default ${1:Module};
		"""
	"Polymer component":
		prefix: "polymer"
		body: """
		class ${1:Component} extends Polymer.Element {
			static get is() {
				return '${2:component}';
			}
		}

		window.customElements.define(${1:Component}.is, ${1:Component});
		"""

# =============================
# Any
# =============================
".source":
	"Comment header":
		prefix: "comment"
		body: """
		/*
		|--------------------------------------------------------------------------
		| ${1:Title}
		|--------------------------------------------------------------------------
		|
		| ${2:Comment here.}
		|
		*/
		"""
